package com.IBTrading.Traders;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.IBTrading.tradeparsers.ProfitlyTradeParser;

public class SupermanTrader implements TraderInterface
{
	// Passed parameters
	private String traderID;
	private String tradeString;
	
	// Parsed trade information
	public String symbol = null;
	public int quantity = 0;
	
	// Valid trade - true if parsed correctly, false otherwise
	public boolean hasValidTrade = false;
	
	// PROFIT.LY
	// List of trader identifiers and their strings
	private static String lastTraderString;
	private static int tradePercentage = 25;
	
	public SupermanTrader(String newTrade)
	{	
		ProfitlyTradeParser parser = new ProfitlyTradeParser();
		String temp = parser.parseTrade(newTrade);
		if(temp != null)
		{
			supermanLastTraderString = temp;
		}
	}
	
	// Parses the passed trade into the necessary information for the trade
	public String parseTrade(String newTrade)
	{
		return "";
	}
	
	public boolean areParamatersValid(String date, String action, String totalQuant, String symb, String price)
	{
		// Get the current date
		DateFormat dateFormatBought = new SimpleDateFormat("MM/dd");
		Date todaysDate = new Date();
		
		// If the date is not the current date
		if(date.equalsIgnoreCase(dateFormatBought.format(todaysDate)) == false)
		{
			System.out.println("Invalid date, " + date);
			return false;
		}
		
		// If the action is not 'Bought'
		if( (action.equalsIgnoreCase("Bought") == false) && (action.equalsIgnoreCase("Added") == false) )
		{
			System.out.println("Invalid action, " + action + " does not match 'Bought' or 'Added'...");
			return false;
		}
		
		// If the totalQuant is not a valid number > 0
		if(Integer.parseInt(totalQuant) <= 0)
		{
			System.out.println("Invalid quantity, " + quantity);
			return false;
		}
		
		// If the symbol is not valid
		if(symb.length() > 10)
		{
			System.out.println("Invalid symbol, " + symb);
			return false;
		}
		
		// If the price is unreasonable
		if(false)
		{
			return false;
		}
			
		// The parameters are valid
		return true;
	}

	// Initiates the trade with TWS
	public boolean trade()
	{
		return true;
	}
}