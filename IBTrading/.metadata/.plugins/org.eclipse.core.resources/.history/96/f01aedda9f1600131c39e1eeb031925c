package com.IBTrading.servlets;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class TradeParsers {
	// Passed parameters
	private String traderID;
	private String tradeString;
	
	// Parsed trade information
	public String symbol = null;
	public int quantity = 0;
	
	// Valid trade - true if parsed correctly, false otherwise
	public boolean isValidTrade = false;
	
	// List of trader identifiers and their strings
	private String SUPERMAN = "superman";  // Superman
	private static String supermanLastTraderString;
	private static int supermanTradePercentage = 25;
	
	private String SYKES = "sykes";  // Tim Sykes
	private static String sykesLastTraderString;
	private static int sykesTradePercentage = 25;
	
	
	public TradeParsers(String newTraderID, String newTrade)
	{
		// If either of the passed values are null, exit
		if( (newTraderID == null) || (newTrade == null) )
		{
			System.out.println("Null arguments...");
			return;
		}
		
		// If this is an invalid time of day, exit
		long MILLIS_AT_8_30_AM = (long) (8.5 * 60 * 60 * 1000);
		long MILLIS_AT_3_00_PM = (long) (15 * 60 * 60 * 1000);
		long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;
		Date now = Calendar.getInstance().getTime();
		long timePortion = now.getTime() % MILLIS_PER_DAY;
		
		if( (MILLIS_AT_8_30_AM < timePortion) && (timePortion < MILLIS_AT_3_00_PM) )
		{
			System.out.println("Market is closed!");
			return;
		}
		
		traderID = newTraderID;
		tradeString = newTrade;
		
		// Parse the new trade string
		if(traderID.equalsIgnoreCase(SUPERMAN))
		{
			RobertMaxwellParser parser = new RobertMaxwellParser();
			parser.parseTrade(newTrade);
		}
	}
	
	public class RobertMaxwellParser
	{
		// Example trade string from RobertMaxwell:
		// 08/28 Bought 15000 shares DGLY at 9.6667 - SWING DONT CHASE  downside 8.25 target 10  if works.....- DGLY only 2.1m shares o/s and same product as TASR camera and patent link
		
		public String date;
		public String action;
		public String totalQuant;
		public String symb;
		public String price;
		
		public void parseTrade(String newTrade)
		{
			// If we are given an invalid value, return
			if(tradeString == null)
			{
				System.out.println("Null trade string");
				isValidTrade = false;
				return;
			}
			
			// If we have already parsed this string, return
			if(newTrade.equalsIgnoreCase(supermanLastTraderString))
			{
				System.out.println("Duplicate trade, " + newTrade);
				isValidTrade = false;
				return;
			}
			
			// Get the useful information
			String[] tokens = tradeString.split("[ ]");
			date = tokens[0];
			action = tokens[1];
			totalQuant = tokens[2];
			symb = tokens[4];
			price = tokens[6];
			
			isValidTrade = areParamatersValid(date, action, totalQuant, symb, price);
			
			// If everything went well, set up the trade
			if(isValidTrade == true)
			{
				// Update the globals
				symbol = symb;
				quantity = (Integer.parseInt(totalQuant) * supermanTradePercentage) / 100;
				
				// Save this for next time
				supermanLastTraderString = newTrade;
			}
		}
		
		public boolean areParamatersValid(String date, String action, String totalQuant, String symb, String price)
		{
			// Get the current date
			DateFormat dateFormat = new SimpleDateFormat("MM/dd");
			Date todaysDate = new Date();
			System.out.println(dateFormat.format(todaysDate));
			
			// If the date is not the current date
			if(date.equalsIgnoreCase(dateFormat.format(todaysDate)) == false)
			{
				System.out.println("Invalid date, " + date);
				return false;
			}
			
			// If the action is not 'Bought'
			if(action.equalsIgnoreCase("Bought") == false)
			{
				System.out.println("Invalid action, " + action + " does not match 'Bought'...");
				return false;
			}
			
			// If the totalQuant is not a valid number > 0
			if(Integer.parseInt(totalQuant) <= 0)
			{
				System.out.println("Invalid quantity, " + quantity);
				return false;
			}
			
			// If the symbol is not valid
			if(symb.length() > 10)
			{
				System.out.println("Invalid symbol, " + symb);
				return false;
			}
			
			// If the price is unreasonable
			if(false)
			{
				return false;
			}
				
			// The parameters are valid
			return true;
		}
	}
}