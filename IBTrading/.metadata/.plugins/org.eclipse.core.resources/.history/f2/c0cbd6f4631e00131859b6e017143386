package com.IBTrading.tradeparsers;

public class ProfitlyTradeParser 
{
	// Passed parameters
	private String traderID;
	private String tradeString;
	
	// Parsed trade information
	public String symbol = null;
	public int quantity = 0;
	
	// Valid trade - true if parsed correctly, false otherwise
	public boolean isValidTrade = false;
	
	// PROFIT.LY
	// List of trader identifiers and their strings
	private String trader = null;  // Superman
	private static String lastTraderString;
	private static int tradePercentage = 0;
	
	private String SUPERMAN = "superman";  // Superman
	private static String supermanLastTraderString;
	private static int supermanTradePercentage = 25;
	
	private String SYKES = "sykes";  // Tim Sykes
	private static String sykesLastTraderString;
	private static int sykesTradePercentage = 25;
	
	
	
	
	
	public String date;
	public String action;
	public String totalQuant;
	public String symb;
	public String price;
	
	
	
	public String parseTrade(String newTrade)
	{
		// If we are given an invalid value, return
		if(tradeString == null)
		{
			System.out.println("Null trade string");
			isValidTrade = false;
			return null;
		}
		
		// If we have already parsed this string, return
		if(newTrade.equalsIgnoreCase(lastTraderString))
		{
			System.out.println("Duplicate trade, " + newTrade);
			isValidTrade = false;
			return null;
		}
		
		// Get the useful information
		String[] tokens = tradeString.split("[ ]");
		int tokensIndex = 0;
		
		// Get the date
		date = tokens[tokensIndex++];
		
		// Ignore the time if it exists
		if( (tokens[tokensIndex].contains("AM")) || (tokens[tokensIndex].contains("PM")))
		{
			tokensIndex++;
		}
		else if( (tokens[tokensIndex + 1].contains("PM")) || (tokens[tokensIndex + 1].contains("PM")) )
		{
			tokensIndex = tokensIndex + 2;
		}
		
		// Get the action
		action = tokens[tokensIndex++];
		
		// Get the quantity
		totalQuant = tokens[tokensIndex];
		tokensIndex = tokensIndex + 2;
		
		// Get the symbol
		symb = tokens[tokensIndex];
		tokensIndex = tokensIndex + 2;
		
		// Get the price
		price = tokens[tokensIndex];
		
		isValidTrade = areParamatersValid(date, action, totalQuant, symb, price);
		
		// If everything went well, set up the trade
		if(isValidTrade == true)
		{
			// Update the globals
			symbol = symb;
			quantity = (Integer.parseInt(totalQuant) * tradePercentage) / 100;
			
			// Save this for next time
			supermanLastTraderString = newTrade;
		}
		else
			return null;
		
		return newTrade;
	}
}
